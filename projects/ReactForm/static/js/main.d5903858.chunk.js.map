{"version":3,"sources":["FormComponent.js","FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","renderedInfoStyle","color","fontSize","react_default","a","createElement","className","name","value","firstName","onChange","handleChange","placeholder","lastName","age","type","destination","checked","Vegan","Kosher","LactoseFree","style","gender","dietary","join","FormContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","_event$target","target","setState","prevState","_ref","nameIndex","indexOf","defineProperty","concat","slice","src_FormComponent","assign","Component","App","src_FormContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5903858.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction FormComponent(props) {\n\n    const renderedInfoStyle = {color: 'rgb(56, 56, 56)', fontSize: '22px'};\n    \n    return (\n\n        <div className=\"genDiv\">\n            \n            <div className=\"headerImg\">\n                <div><h1>This is your new airline</h1></div>\n                <div><h2>Where will you go ?</h2></div>\n            </div>\n\n            <main>\n\n                <h1>Please use this form:</h1>\n\n                <form>\n                    \n                    <input \n                        name=\"firstName\" \n                        value={props.firstName} \n                        onChange={props.handleChange} \n                        placeholder=\"First Name\" \n                    />\n                    \n                    <br />\n                    \n                    <input \n                        name=\"lastName\" \n                        value={props.lastName}\n                        onChange={props.handleChange} \n                        placeholder=\"Last Name\" \n                    />\n                    \n                    <br />\n                    \n                    <input \n                        name=\"age\" \n                        value={props.age}\n                        onChange={props.handleChange} \n                        placeholder=\"Age\" \n                    />\n                    \n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"radio\" \n                            name=\"gender\"\n                            value=\"Male\"\n                            onChange={props.handleChange}\n                        /> Male\n                    </label>\n                    \n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"radio\" \n                            name=\"gender\"\n                            value=\"Female\"\n                            onChange={props.handleChange}\n                        /> Female\n                    </label>\n                    \n                    <br />\n                    \n                    <select \n                        value={props.destination} \n                        name=\"destination\" \n                        onChange={props.handleChange}\n                    >\n                        <option value=\"\">-- Please Choose a destination --</option>\n                        <option value=\"Germany\">Germany</option>\n                        <option value=\"Norway\">Norway</option>\n                        <option value=\"North Pole\">North Pole</option>\n                        <option value=\"South Pole\">South Pole</option>\n                    </select>\n                    \n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"checkbox\"\n                            name=\"Vegan\"\n                            onChange={props.handleChange}\n                            checked={props.Vegan}\n                        /> Vegan?\n                    </label>\n                    \n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"checkbox\"\n                            name=\"Kosher\"\n                            onChange={props.handleChange}\n                            checked={props.Kosher}\n                        /> Kosher?\n                    </label>\n                    \n                    <br />\n                    \n                    <label>\n                        <input \n                            type=\"checkbox\"\n                            name=\"LactoseFree\"\n                            onChange={props.handleChange}\n                            checked={props.LactoseFree}\n                        /> Lactose Free?\n                    </label>\n                    \n                    <br />\n                    \n                    <button>Submit</button>\n\n                </form>\n\n                <hr />\n\n                <div className=\"entInfo\">\n\n                    <h2>Entered information:</h2>\n\n                    <p>Your name: <strong style={renderedInfoStyle}>\n                                    {props.firstName} {props.lastName}\n                                </strong>\n                    </p>\n\n                    <p>Your age: <span style={renderedInfoStyle}>\n                                    {props.age}\n                                </span>\n                    </p>\n\n                    <p>Your gender: <span style={renderedInfoStyle}>\n                                        {props.gender}\n                                    </span>\n                    </p>\n\n                    <p>Your destination: <strong style={renderedInfoStyle}>\n                                            {props.destination}\n                                        </strong>\n                    </p>\n\n                    <p>Your dietary restrictions: <em style={renderedInfoStyle}>\n                                                    {props.dietary.join(\", \")}\n                                                </em>\n                    </p>\n\n                    <p>Vegan: <em style={renderedInfoStyle}>\n                                {props.Vegan ? \"Yes\" : \"No\"}\n                            </em>\n                    </p>\n\n                    <p>Kosher: <em style={renderedInfoStyle}>\n                                {props.Kosher ? \"Yes\" : \"No\"}\n                            </em>\n                    </p>\n\n                    <p>Lactose Free: <em style={renderedInfoStyle}>\n                                        {props.LactoseFree ? \"Yes\" : \"No\"}\n                                    </em>\n                    </p>\n\n                </div>\n\n            </main>\n\n        </div>\n    \n    )\n    \n}\n\nexport default FormComponent;","import React, { Component } from 'react';\nimport './App.css';\nimport FormComponent from './FormComponent';\n\nclass FormContainer extends Component {\n    \n    constructor() {\n    \n        super();\n\n        this.state = {\n            firstName: \"\",\n            lastName: \"\",\n            age: \"\",\n            gender: \"\",\n            destination: \"\",\n            Vegan: false,\n            Kosher: false,\n            LactoseFree: false,\n            dietary: []\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n  \n    handleChange(event) {\n      \n        const {name, value, type, checked} = event.target;\n        \n        type === \"checkbox\" ? \n        this.setState(prevState => {\n            \n            let nameIndex = prevState.dietary.indexOf(name);\n            \n            return {\n                    [name]: checked,\n                    dietary: checked ? prevState.dietary.concat(name) : prevState.dietary.slice(0, nameIndex).concat(prevState.dietary.slice(nameIndex+1))\n            };  \n        })\n        \n        :\n\n        this.setState({\n            [name]: value\n        }); \n    }\n  \n    render() {\n      \n        return <FormComponent handleChange={this.handleChange} {...this.state}/>\n\n    }\n\n}\n\nexport default FormContainer;\n","import React from 'react';\nimport FormContainer from './FormContainer';\n\nfunction App() {\n    return (\n        <FormContainer />\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}