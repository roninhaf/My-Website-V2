{"version":3,"sources":["StarComponentLogo.js","StarComponentSortBar.js","StarContainer.js","App.js","serviceWorker.js","index.js","star_wars_logo_PNG31.png"],"names":["StarComponentLogo","react_default","a","createElement","src","logo","className","alt","StarComponentSortBar","props","id","onClick","StarContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","isLoading","error","handleClick","bind","assertThisInitialized","event","target","setState","sort","b","Number","height","mass","films","length","name","_this2","fetch","then","response","ok","json","Error","result","results","catch","message","src_StarComponentLogo","src_StarComponentSortBar","map","key","created","edited","url","Component","App","src_StarContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.a305c260.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './star_wars_logo_PNG31.png';\n\nfunction StarComponentLogo() {\n    return (\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    )\n}\n\nexport default StarComponentLogo;","import React from 'react';\n\nfunction StarComponentSortBar(props) {\n    return (\n        <div className='buttonContainer'>\n            <button id='height' onClick={props.onClick}>Sort by height</button>\n            <button id='mass' onClick={props.onClick}>Sort by mass</button>\n            <button id='film' onClick={props.onClick}>Sort by number of films</button>\n            <button id='name' onClick={props.onClick}>Sort by name</button>\n        </div>\n    )\n}\n\nexport default StarComponentSortBar;","import React, {Component} from 'react';\nimport StarComponentLogo from './StarComponentLogo';\nimport StarComponentSortBar from './StarComponentSortBar';\n\nclass StarContainer extends Component {\n    \n    constructor(props) {\n        \n        super(props);\n\n        this.state = {\n          data: [],\n          isLoading: false,\n          error: null,\n        };\n\n        this.handleClick = this.handleClick.bind(this);\n\n      }\n\n      handleClick(event) {\n\n        switch (event.target.id) {\n            case 'height':\n            this.setState({data: this.state.data.sort((a,b) => Number(a.height) > Number(b.height) ? 1 : -1)});\n            break;\n            case 'mass':\n            this.setState({data: this.state.data.sort((a,b) => Number(a.mass) > Number(b.mass) ? 1 : -1)});\n            break;\n            case 'film':\n            this.setState({data: this.state.data.sort((a,b) => a.films.length > b.films.length ? 1 : -1)});\n            break;\n            case 'name':\n            this.setState({data: this.state.data.sort((a,b) => a.name > b.name ? 1 : -1)});\n            break;\n            default:\n            this.setState({data: this.state.data.sort((a,b) => a.name > b.name ? 1 : -1)});\n        }\n      }\n    \n      componentDidMount() {\n\n        this.setState({ isLoading: true });\n        \n        fetch(\"https://swapi.co/api/people/\")\n        .then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n              throw new Error('Something went wrong ...');\n            }\n          })    \n          .then(result => this.setState({ data: result.results.sort((a,b)=>a.name>b.name), isLoading: false }))\n          .catch(error => this.setState({ error, isLoading: false }));\n      }\n\n    render() {\n        \n        if (this.state.error) {\n            return <p>{this.state.error.message}</p>;\n          }\n        if (this.state.isLoading) {\n            return <p>Loading ...</p>;\n        }\n        \n        return (\n        \n            <div>\n                <StarComponentLogo />\n                <StarComponentSortBar onClick={this.handleClick}/>\n    \n                <div className='container'>\n                    {this.state.data.map((a,) => \n                        \n                        <div className='card' key={a.created}>\n                            <h1>{a.name}</h1>\n                            <ul>\n                                <li key={a.created}>Height: {a.height}cm</li>\n                                <li key={a.edited}>Mass: {a.mass}kgs</li>\n                                <li key={a.url}>Appears in {a.films.length} movies</li>\n                            </ul>\n                        </div>            \n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StarContainer;","import React from 'react';\nimport StarContainer from './StarContainer'\nimport './App.css';\n\nfunction App(){\n    return (\n      <div className=\"App\">\n          <StarContainer />\n      </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/star_wars_logo_PNG31.c181ab2b.png\";"],"sourceRoot":""}